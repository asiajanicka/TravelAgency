@startuml
interface ICost {
{abstract} BigDecimal calculatePrice()
}
interface IDescribe {
{abstract} void printSummary()
}
interface IBook {
{abstract} boolean book()
}
class Hotel {
- String name
- int startsRating
- String address
- List<Room> rooms
+ Room getRoom(int roomNumber)
+ Room bookRoom(int roomNumber)
+ List<Room> getAllAvailableRooms()
+ Room getFirstAvailableRoom()
+ Room getRoomByType((RoomType roomType)
}

class Seat<T> {
- int number
- BigDecimal price
- boolean isBooked
- T seatType
}
class Participant {
- Person person
- List<HotelBooking> hotelBookings
- List<TransportBooking> transportBookings
- List<Activity> activities
+ void addTransportBooking(TransportBooking)
+ void addHotelBooking(HotelBooking)
+ void addActivity(Activity)
- void printTransportBookings()
- void printHotelBookings()
- void printActivityBookings()
+ final BigDecimal calculateTotalBookingCost()
}
class FlightBooking {
- PlaneBaggage baggage
# BigDecimal getPriceForLuggage()
}
class CustomizedTrip {
- LocalDate startDate
- LocalDate endDate
- List<Participant> participants
- List<Destination> destinations
+ void addDestination(Destination)
+ void addParticipant(Participant)
+ BigDecimal calculateTotalPrice()
}
class HotelBooking {
- LocalDate dateFrom
- LocalDate dateTo
- Hotel hotel
- Room room
- Board board
- boolean isForAdult
- int getLengthOfStaying()
}
class Board {
- BoardType type
+ BigDecimal getPrice()
}
class Flight {
+ LocalDateTime getBoardingTime()
+ Seat<PlaneSeatType> getSeatByType(PlaneSeatType seatType)
}
class TravelAgency {
- List<Destination> destinations
+ void addDestination(Destination)
+ void printDestinations()
}
class CoachTravelBooking {
- int numberOfSmallSuitcases
- int numberOfLargeSuitcases
# BigDecimal getPriceForLuggage()
}
abstract class Transport<T> {
- LocalDateTime dateDeparture
- LocalDateTime dateArrival
- City cityFrom
- City cityTo
- TransportType type
- List<Seat<T>> seats
+ Seat<T> getSeat(int seatNumber)
+ Seat<T> bookSeat(int seatNumber)
+ List<Seat<T>> getAvailableSeats()
+ Seat<T> getFirstAvailableSeat()
+ {abstract} Seat<T> getSeatByType(T seatType)
}
class Place {
- Country country
- City city
}
class Room {
- int number
- RoomType type
- BigDecimal price
- boolean isBooked
}
class OutOfHotelActivity {
- String address
- boolean isTransportProvided
- double lengthInHours
- Language language
}
abstract class Activity {
- LocalDateTime date
- String name
- BigDecimal price
}
class AtHotelActivity {
- ActivityType type
- boolean isOwnEquipmentRequired
}
class Destination {
- Place place
- Hotel hotel
- List<Transport> transports
- List<Activity> activities
+ Activity findActivity(String)
+ void addActivity(Activity)
+ void addTransport(Transport)
+ Transport findTransport(City,City,TransportType)
}
abstract class TransportBooking<T> {
- Transport<T> transport
- Seat<T> seat
- boolean isForAdult
+ BigDecimal getPriceForSeat()
# {abstract}BigDecimal getPriceForLuggage();
}
class Person {
- int id
- String firstName
- String lastName
- int age
}
class CoachTravel {
+ Seat<CoachSeatType> getSeatByType(CoachSeatType seatType)
}

TravelAgency *-- Destination
CustomizedTrip o-- Destination
CustomizedTrip *-- Participant
Destination *-- Transport
Destination *-- Hotel
Destination *-- Activity
Destination o-- Place
Participant o-- Person
Participant o-- Activity
Participant *-- HotelBooking
Participant *-- TransportBooking
Hotel *-- Room
HotelBooking o-- Room
HotelBooking o-- Board
HotelBooking o-- Hotel
TransportBooking o-- Transport
ICost <|-- HotelBooking
ICost <|-- TransportBooking
IDescribe <|--  CustomizedTrip
IDescribe <|-- Participant
IDescribe <|-- Destination
IBook <|-- Room
IBook <|-- Seat
TransportBooking <|-- FlightBooking
Transport <|-- Flight
TransportBooking <|-- CoachTravelBooking
Activity <|-- OutOfHotelActivity
Activity <|-- AtHotelActivity
Transport <|-- CoachTravel
Transport *- Seat
@enduml